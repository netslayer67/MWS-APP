import{r as c,j as l,W as R,Y as f,R as I,D as w}from"./index-BeQwOtyQ.js";var u="Progress",d=100,[E]=R(u),[j,y]=E(u),m=c.forwardRef((e,r)=>{const{__scopeProgress:n,value:t=null,max:a,getValueLabel:b=_,...h}=e;(a||a===0)&&!v(a)&&console.error(M(`${a}`,"Progress"));const o=v(a)?a:d;t!==null&&!p(t,o)&&console.error(V(`${t}`,"Progress"));const s=p(t,o)?t:null,$=i(s)?b(s,o):void 0;return l.jsx(j,{scope:n,value:s,max:o,children:l.jsx(f.div,{"aria-valuemax":o,"aria-valuemin":0,"aria-valuenow":i(s)?s:void 0,"aria-valuetext":$,role:"progressbar","data-state":P(s,o),"data-value":s??void 0,"data-max":o,...h,ref:r})})});m.displayName=u;var g="ProgressIndicator",x=c.forwardRef((e,r)=>{const{__scopeProgress:n,...t}=e,a=y(g,n);return l.jsx(f.div,{"data-state":P(a.value,a.max),"data-value":a.value??void 0,"data-max":a.max,...t,ref:r})});x.displayName=g;function _(e,r){return`${Math.round(e/r*100)}%`}function P(e,r){return e==null?"indeterminate":e===r?"complete":"loading"}function i(e){return typeof e=="number"}function v(e){return i(e)&&!isNaN(e)&&e>0}function p(e,r){return i(e)&&!isNaN(e)&&e<=r&&e>=0}function M(e,r){return`Invalid prop \`max\` of value \`${e}\` supplied to \`${r}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${d}\`.`}function V(e,r){return`Invalid prop \`value\` of value \`${e}\` supplied to \`${r}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${d} if no \`max\` prop is set)
  - \`null\` or \`undefined\` if the progress is indeterminate.

Defaulting to \`null\`.`}var N=m,A=x;const D=I.forwardRef(({className:e,value:r,...n},t)=>l.jsx(N,{ref:t,className:w("relative h-2 w-full overflow-hidden rounded-full bg-white/20",e),...n,children:l.jsx(A,{className:"h-full w-full flex-1 bg-gradient-to-r from-purple-500 to-blue-500 transition-all",style:{transform:`translateX(-${100-(r||0)}%)`}})}));D.displayName=N.displayName;export{D as P};
